class Graph:
    def __init__(self):
        self.adjacency_list = {}

    def add_friendship(self, person1, person2):
        if person1 not in self.adjacency_list:
            self.adjacency_list[person1] = []
        if person2 not in self.adjacency_list:
            self.adjacency_list[person2] = []
        self.adjacency_list[person1].append(person2)
        self.adjacency_list[person2].append(person1)

    def get_friends(self, person):
        return set(self.adjacency_list.get(person, []))

    def get_common_friends(self, person1, person2):
        return self.get_friends(person1).intersection(self.get_friends(person2))

    def find_nth_connection(self, start, end):
        if start not in self.adjacency_list or end not in self.adjacency_list:
            return -1
        
        visited = set()
        queue = [(start, 0)]
        
        while queue:
            current, distance = queue.pop(0)
            
            if current == end:
                return distance
            
            if current not in visited:
                visited.add(current)
                for friend in self.adjacency_list[current]:
                    if friend not in visited:
                        queue.append((friend, distance + 1))
        
        return -1

def main():
    graph = Graph()

    # Add friendships
    graph.add_friendship("Alice", "Bob")
    graph.add_friendship("Bob", "Janice")
    graph.add_friendship("Alice", "Charlie")
    graph.add_friendship("Charlie", "David")
    graph.add_friendship("David", "Eve")
    graph.add_friendship("Eve", "Janice")

    # Find all friends of Alice and Bob
    alice_friends = graph.get_friends("Alice")
    bob_friends = graph.get_friends("Bob")
    common_friends = graph.get_common_friends("Alice", "Bob")

    print("Friends of Alice:", alice_friends)
    print("Friends of Bob:", bob_friends)
    print("Common friends of Alice and Bob:", common_friends)

    # Find nth connection
    print("Connection(Alice, Janice):", graph.find_nth_connection("Alice", "Janice"))
    print("Connection(Alice, Bob):", graph.find_nth_connection("Alice", "Bob"))
    print("Connection(Alice, Eve):", graph.find_nth_connection("Alice", "Eve"))

if __name__ == "__main__":
    main()
